/**
 * Kaldi speech recognition REST API
 * Simple REST interface for posting tasks for non realtime speech recognition
 *
 * The version of the OpenAPI document: 0.9.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

 /*
  * Result.h
  *
  *
  */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Result_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Result_H_


#include "apiClient/ModelBase.h"

#include "Segment.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace mvshyvk {
namespace kaldi {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  Result
	: public ModelBase
{
public:
	Result();
	virtual ~Result();

	/////////////////////////////////////////////
	/// ModelBase overrides

	void validate() override;

	web::json::value toJson() const override;
	bool fromJson(const web::json::value& json) override;

	void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
	bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

	/////////////////////////////////////////////
	/// Result members

	/// <summary>
	/// 
	/// </summary>
	utility::string_t getTaskId() const;
	bool taskIdIsSet() const;
	void unsettaskId();

	void setTaskId(const utility::string_t& value);

	/// <summary>
	/// 
	/// </summary>
	utility::string_t getStatus() const;
	bool statusIsSet() const;
	void unsetstatus();

	void setStatus(const utility::string_t& value);

	/// <summary>
	/// 
	/// </summary>
	utility::string_t getText() const;
	bool textIsSet() const;
	void unsettext();

	void setText(const utility::string_t& value);

	/// <summary>
	/// 
	/// </summary>
	std::vector<std::shared_ptr<Segment>>& getTextChunks();
	bool textChunksIsSet() const;
	void unsettextChunks();

	void setTextChunks(const std::vector<std::shared_ptr<Segment>>& value);


protected:
	utility::string_t m_taskId;
	bool m_taskIdIsSet;
	utility::string_t m_status;
	bool m_statusIsSet;
	utility::string_t m_text;
	bool m_textIsSet;
	std::vector<std::shared_ptr<Segment>> m_textChunks;
	bool m_textChunksIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Result_H_ */
