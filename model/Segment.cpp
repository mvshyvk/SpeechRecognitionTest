/**
 * Kaldi speech recognition REST API
 * Simple REST interface for posting tasks for non realtime speech recognition
 *
 * The version of the OpenAPI document: 0.9.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Segment.h"

namespace mvshyvk {
namespace kaldi {
namespace client {
namespace model {




Segment::Segment()
{
	m_timeStart = 0;
	m_timeStartIsSet = false;
	m_timeEnd = 0;
	m_timeEndIsSet = false;
	m_segmentText = utility::conversions::to_string_t("");
	m_segmentTextIsSet = false;
}

Segment::~Segment()
{
}

void Segment::validate()
{
	// TODO: implement validation
}

web::json::value Segment::toJson() const
{

	web::json::value val = web::json::value::object();

	if (m_timeStartIsSet)
	{
		val[utility::conversions::to_string_t("timeStart")] = ModelBase::toJson(m_timeStart);
	}
	if (m_timeEndIsSet)
	{
		val[utility::conversions::to_string_t("timeEnd")] = ModelBase::toJson(m_timeEnd);
	}
	if (m_segmentTextIsSet)
	{
		val[utility::conversions::to_string_t("segmentText")] = ModelBase::toJson(m_segmentText);
	}

	return val;
}

bool Segment::fromJson(const web::json::value& val)
{
	bool ok = true;

	if (val.has_field(utility::conversions::to_string_t("timeStart")))
	{
		const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("timeStart"));
		if (!fieldValue.is_null())
		{
			int32_t refVal_timeStart;
			ok &= ModelBase::fromJson(fieldValue, refVal_timeStart);
			setTimeStart(refVal_timeStart);
		}
	}
	if (val.has_field(utility::conversions::to_string_t("timeEnd")))
	{
		const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("timeEnd"));
		if (!fieldValue.is_null())
		{
			int32_t refVal_timeEnd;
			ok &= ModelBase::fromJson(fieldValue, refVal_timeEnd);
			setTimeEnd(refVal_timeEnd);
		}
	}
	if (val.has_field(utility::conversions::to_string_t("segmentText")))
	{
		const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("segmentText"));
		if (!fieldValue.is_null())
		{
			utility::string_t refVal_segmentText;
			ok &= ModelBase::fromJson(fieldValue, refVal_segmentText);
			setSegmentText(refVal_segmentText);
		}
	}
	return ok;
}

void Segment::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
	utility::string_t namePrefix = prefix;
	if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
	{
		namePrefix += utility::conversions::to_string_t(".");
	}
	if (m_timeStartIsSet)
	{
		multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timeStart"), m_timeStart));
	}
	if (m_timeEndIsSet)
	{
		multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timeEnd"), m_timeEnd));
	}
	if (m_segmentTextIsSet)
	{
		multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("segmentText"), m_segmentText));
	}
}

bool Segment::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
	bool ok = true;
	utility::string_t namePrefix = prefix;
	if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
	{
		namePrefix += utility::conversions::to_string_t(".");
	}

	if (multipart->hasContent(utility::conversions::to_string_t("timeStart")))
	{
		int32_t refVal_timeStart;
		ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("timeStart")), refVal_timeStart);
		setTimeStart(refVal_timeStart);
	}
	if (multipart->hasContent(utility::conversions::to_string_t("timeEnd")))
	{
		int32_t refVal_timeEnd;
		ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("timeEnd")), refVal_timeEnd);
		setTimeEnd(refVal_timeEnd);
	}
	if (multipart->hasContent(utility::conversions::to_string_t("segmentText")))
	{
		utility::string_t refVal_segmentText;
		ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("segmentText")), refVal_segmentText);
		setSegmentText(refVal_segmentText);
	}
	return ok;
}

int32_t Segment::getTimeStart() const
{
	return m_timeStart;
}

void Segment::setTimeStart(int32_t value)
{
	m_timeStart = value;
	m_timeStartIsSet = true;
}

bool Segment::timeStartIsSet() const
{
	return m_timeStartIsSet;
}

void Segment::unsettimeStart()
{
	m_timeStartIsSet = false;
}
int32_t Segment::getTimeEnd() const
{
	return m_timeEnd;
}

void Segment::setTimeEnd(int32_t value)
{
	m_timeEnd = value;
	m_timeEndIsSet = true;
}

bool Segment::timeEndIsSet() const
{
	return m_timeEndIsSet;
}

void Segment::unsettimeEnd()
{
	m_timeEndIsSet = false;
}
utility::string_t Segment::getSegmentText() const
{
	return m_segmentText;
}

void Segment::setSegmentText(const utility::string_t& value)
{
	m_segmentText = value;
	m_segmentTextIsSet = true;
}

bool Segment::segmentTextIsSet() const
{
	return m_segmentTextIsSet;
}

void Segment::unsetsegmentText()
{
	m_segmentTextIsSet = false;
}
}
}
}
}


