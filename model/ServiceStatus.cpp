/**
 * Kaldi speech recognition REST API
 * Simple REST interface for posting tasks for non realtime speech recognition
 *
 * The version of the OpenAPI document: 0.9.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ServiceStatus.h"

namespace mvshyvk {
namespace kaldi {
namespace client {
namespace model {




ServiceStatus::ServiceStatus()
{
	m_workersCount = 0;
	m_workersCountIsSet = false;
	m_queueDepth = 0;
	m_queueDepthIsSet = false;
	m_availableQueueSlots = 0;
	m_availableQueueSlotsIsSet = false;
}

ServiceStatus::~ServiceStatus()
{
}

void ServiceStatus::validate()
{
	// TODO: implement validation
}

web::json::value ServiceStatus::toJson() const
{

	web::json::value val = web::json::value::object();

	if (m_workersCountIsSet)
	{
		val[utility::conversions::to_string_t("workersCount")] = ModelBase::toJson(m_workersCount);
	}
	if (m_queueDepthIsSet)
	{
		val[utility::conversions::to_string_t("queueDepth")] = ModelBase::toJson(m_queueDepth);
	}
	if (m_availableQueueSlotsIsSet)
	{
		val[utility::conversions::to_string_t("availableQueueSlots")] = ModelBase::toJson(m_availableQueueSlots);
	}

	return val;
}

bool ServiceStatus::fromJson(const web::json::value& val)
{
	bool ok = true;

	if (val.has_field(utility::conversions::to_string_t("workersCount")))
	{
		const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("workersCount"));
		if (!fieldValue.is_null())
		{
			int32_t refVal_workersCount;
			ok &= ModelBase::fromJson(fieldValue, refVal_workersCount);
			setWorkersCount(refVal_workersCount);
		}
	}
	if (val.has_field(utility::conversions::to_string_t("queueDepth")))
	{
		const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("queueDepth"));
		if (!fieldValue.is_null())
		{
			int32_t refVal_queueDepth;
			ok &= ModelBase::fromJson(fieldValue, refVal_queueDepth);
			setQueueDepth(refVal_queueDepth);
		}
	}
	if (val.has_field(utility::conversions::to_string_t("availableQueueSlots")))
	{
		const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("availableQueueSlots"));
		if (!fieldValue.is_null())
		{
			int32_t refVal_availableQueueSlots;
			ok &= ModelBase::fromJson(fieldValue, refVal_availableQueueSlots);
			setAvailableQueueSlots(refVal_availableQueueSlots);
		}
	}
	return ok;
}

void ServiceStatus::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
	utility::string_t namePrefix = prefix;
	if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
	{
		namePrefix += utility::conversions::to_string_t(".");
	}
	if (m_workersCountIsSet)
	{
		multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("workersCount"), m_workersCount));
	}
	if (m_queueDepthIsSet)
	{
		multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("queueDepth"), m_queueDepth));
	}
	if (m_availableQueueSlotsIsSet)
	{
		multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("availableQueueSlots"), m_availableQueueSlots));
	}
}

bool ServiceStatus::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
	bool ok = true;
	utility::string_t namePrefix = prefix;
	if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
	{
		namePrefix += utility::conversions::to_string_t(".");
	}

	if (multipart->hasContent(utility::conversions::to_string_t("workersCount")))
	{
		int32_t refVal_workersCount;
		ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("workersCount")), refVal_workersCount);
		setWorkersCount(refVal_workersCount);
	}
	if (multipart->hasContent(utility::conversions::to_string_t("queueDepth")))
	{
		int32_t refVal_queueDepth;
		ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("queueDepth")), refVal_queueDepth);
		setQueueDepth(refVal_queueDepth);
	}
	if (multipart->hasContent(utility::conversions::to_string_t("availableQueueSlots")))
	{
		int32_t refVal_availableQueueSlots;
		ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("availableQueueSlots")), refVal_availableQueueSlots);
		setAvailableQueueSlots(refVal_availableQueueSlots);
	}
	return ok;
}

int32_t ServiceStatus::getWorkersCount() const
{
	return m_workersCount;
}

void ServiceStatus::setWorkersCount(int32_t value)
{
	m_workersCount = value;
	m_workersCountIsSet = true;
}

bool ServiceStatus::workersCountIsSet() const
{
	return m_workersCountIsSet;
}

void ServiceStatus::unsetworkersCount()
{
	m_workersCountIsSet = false;
}
int32_t ServiceStatus::getQueueDepth() const
{
	return m_queueDepth;
}

void ServiceStatus::setQueueDepth(int32_t value)
{
	m_queueDepth = value;
	m_queueDepthIsSet = true;
}

bool ServiceStatus::queueDepthIsSet() const
{
	return m_queueDepthIsSet;
}

void ServiceStatus::unsetqueueDepth()
{
	m_queueDepthIsSet = false;
}
int32_t ServiceStatus::getAvailableQueueSlots() const
{
	return m_availableQueueSlots;
}

void ServiceStatus::setAvailableQueueSlots(int32_t value)
{
	m_availableQueueSlots = value;
	m_availableQueueSlotsIsSet = true;
}

bool ServiceStatus::availableQueueSlotsIsSet() const
{
	return m_availableQueueSlotsIsSet;
}

void ServiceStatus::unsetavailableQueueSlots()
{
	m_availableQueueSlotsIsSet = false;
}
}
}
}
}


