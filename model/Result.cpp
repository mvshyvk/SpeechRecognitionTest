/**
 * Kaldi speech recognition REST API
 * Simple REST interface for posting tasks for non realtime speech recognition
 *
 * The version of the OpenAPI document: 0.9.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Result.h"

namespace mvshyvk {
namespace kaldi {
namespace client {
namespace model {




Result::Result()
{
	m_taskId = utility::conversions::to_string_t("");
	m_taskIdIsSet = false;
	m_status = utility::conversions::to_string_t("");
	m_statusIsSet = false;
	m_text = utility::conversions::to_string_t("");
	m_textIsSet = false;
	m_textChunksIsSet = false;
}

Result::~Result()
{
}

void Result::validate()
{
	// TODO: implement validation
}

web::json::value Result::toJson() const
{

	web::json::value val = web::json::value::object();

	if (m_taskIdIsSet)
	{
		val[utility::conversions::to_string_t("taskId")] = ModelBase::toJson(m_taskId);
	}
	if (m_statusIsSet)
	{
		val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_status);
	}
	if (m_textIsSet)
	{
		val[utility::conversions::to_string_t("text")] = ModelBase::toJson(m_text);
	}
	if (m_textChunksIsSet)
	{
		val[utility::conversions::to_string_t("textChunks")] = ModelBase::toJson(m_textChunks);
	}

	return val;
}

bool Result::fromJson(const web::json::value& val)
{
	bool ok = true;

	if (val.has_field(utility::conversions::to_string_t("taskId")))
	{
		const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("taskId"));
		if (!fieldValue.is_null())
		{
			utility::string_t refVal_taskId;
			ok &= ModelBase::fromJson(fieldValue, refVal_taskId);
			setTaskId(refVal_taskId);
		}
	}
	if (val.has_field(utility::conversions::to_string_t("status")))
	{
		const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("status"));
		if (!fieldValue.is_null())
		{
			utility::string_t refVal_status;
			ok &= ModelBase::fromJson(fieldValue, refVal_status);
			setStatus(refVal_status);
		}
	}
	if (val.has_field(utility::conversions::to_string_t("text")))
	{
		const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("text"));
		if (!fieldValue.is_null())
		{
			utility::string_t refVal_text;
			ok &= ModelBase::fromJson(fieldValue, refVal_text);
			setText(refVal_text);
		}
	}
	if (val.has_field(utility::conversions::to_string_t("textChunks")))
	{
		const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("textChunks"));
		if (!fieldValue.is_null())
		{
			std::vector<std::shared_ptr<Segment>> refVal_textChunks;
			ok &= ModelBase::fromJson(fieldValue, refVal_textChunks);
			setTextChunks(refVal_textChunks);
		}
	}
	return ok;
}

void Result::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
	utility::string_t namePrefix = prefix;
	if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
	{
		namePrefix += utility::conversions::to_string_t(".");
	}
	if (m_taskIdIsSet)
	{
		multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("taskId"), m_taskId));
	}
	if (m_statusIsSet)
	{
		multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_status));
	}
	if (m_textIsSet)
	{
		multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("text"), m_text));
	}
	if (m_textChunksIsSet)
	{
		multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("textChunks"), m_textChunks));
	}
}

bool Result::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
	bool ok = true;
	utility::string_t namePrefix = prefix;
	if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
	{
		namePrefix += utility::conversions::to_string_t(".");
	}

	if (multipart->hasContent(utility::conversions::to_string_t("taskId")))
	{
		utility::string_t refVal_taskId;
		ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("taskId")), refVal_taskId);
		setTaskId(refVal_taskId);
	}
	if (multipart->hasContent(utility::conversions::to_string_t("status")))
	{
		utility::string_t refVal_status;
		ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("status")), refVal_status);
		setStatus(refVal_status);
	}
	if (multipart->hasContent(utility::conversions::to_string_t("text")))
	{
		utility::string_t refVal_text;
		ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("text")), refVal_text);
		setText(refVal_text);
	}
	if (multipart->hasContent(utility::conversions::to_string_t("textChunks")))
	{
		std::vector<std::shared_ptr<Segment>> refVal_textChunks;
		ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("textChunks")), refVal_textChunks);
		setTextChunks(refVal_textChunks);
	}
	return ok;
}

utility::string_t Result::getTaskId() const
{
	return m_taskId;
}

void Result::setTaskId(const utility::string_t& value)
{
	m_taskId = value;
	m_taskIdIsSet = true;
}

bool Result::taskIdIsSet() const
{
	return m_taskIdIsSet;
}

void Result::unsettaskId()
{
	m_taskIdIsSet = false;
}
utility::string_t Result::getStatus() const
{
	return m_status;
}

void Result::setStatus(const utility::string_t& value)
{
	m_status = value;
	m_statusIsSet = true;
}

bool Result::statusIsSet() const
{
	return m_statusIsSet;
}

void Result::unsetstatus()
{
	m_statusIsSet = false;
}
utility::string_t Result::getText() const
{
	return m_text;
}

void Result::setText(const utility::string_t& value)
{
	m_text = value;
	m_textIsSet = true;
}

bool Result::textIsSet() const
{
	return m_textIsSet;
}

void Result::unsettext()
{
	m_textIsSet = false;
}
std::vector<std::shared_ptr<Segment>>& Result::getTextChunks()
{
	return m_textChunks;
}

void Result::setTextChunks(const std::vector<std::shared_ptr<Segment>>& value)
{
	m_textChunks = value;
	m_textChunksIsSet = true;
}

bool Result::textChunksIsSet() const
{
	return m_textChunksIsSet;
}

void Result::unsettextChunks()
{
	m_textChunksIsSet = false;
}
}
}
}
}


